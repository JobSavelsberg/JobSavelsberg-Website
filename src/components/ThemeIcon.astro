---

---

<button id="themeToggle">
    <div class="disc-container">
        <div class="rotating-disc">
            <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="2"></circle>
                <path d="m12 0.5 0 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m12 22 0 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m3.5 3.5 1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m19 19 1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m0.5 12 1.5 0" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m22 12 1.5 0" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m5 19-1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m20.5 3.5-1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
            </svg>

            <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 12.79A10 10 0 1 1 10.21 3 7 7 0 0 0 21 12.79z" stroke="currentColor" stroke-width="2"
                ></path>
            </svg>
        </div>
    </div>
</button>

<style>
    #themeToggle {
        border: 0;
        background: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 15px;
        position: relative;
        overflow: hidden;
    }

    #themeToggle::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(ellipse 45% 90% at bottom, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0));
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    :global(.dark) #themeToggle::before {
        background: radial-gradient(ellipse 45% 90% at bottom, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0));
    }

    @media (hover: hover) {
        #themeToggle:hover::before {
            opacity: 1;
        }
    }

    .disc-container {
        width: 30px;
        height: 30px; /* Only show top half */
        overflow: hidden;
        border-radius: 15px; /* Semicircle shape */
        position: relative;
    }

    .rotating-disc {
        width: 60px;
        height: 60px;
        position: absolute;
        top: 0;
        left: -16px;
        transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: 30px 30px; /* Center of the disc */
    }

    .sun-icon,
    .moon-icon {
        position: absolute;
        color: #000;
    }

    .sun-icon circle,
    .sun-icon path,
    .moon-icon path {
        fill: currentColor;
        fill-opacity: 0;
        transition: fill-opacity 0.2s ease;
    }

    :global(.dark) .sun-icon,
    :global(.dark) .moon-icon {
        color: #fff;
    }

    @media (hover: hover) {
        #themeToggle:hover .sun-icon circle,
        #themeToggle:hover .moon-icon path {
            fill-opacity: 1;
        }
    }

    /* Sun positioned at top of disc (12 o'clock) */
    .sun-icon {
        left: 20px; /* Center horizontally in the disc */
        top: 35px; /* Moved closer to edge */
    }

    /* Moon positioned at bottom of disc (6 o'clock) */
    .moon-icon {
        left: 20px; /* Center horizontally in the disc */
        top: 4px; /* Moved further from center */
    }
</style>

<script is:inline>
    const theme = (() => {
        const localStorageTheme = localStorage?.getItem("theme") ?? "";
        if (["dark", "light"].includes(localStorageTheme)) {
            return localStorageTheme;
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
        }
        return "light";
    })();

    if (theme === "light") {
        document.documentElement.classList.remove("dark");
    } else {
        document.documentElement.classList.add("dark");
    }

    window.localStorage.setItem("theme", theme);

    // Track rotation state for continuous rotation
    let currentRotation = theme === "dark" ? 0 : 180;

    // Set initial rotation
    const disc = document.querySelector(".rotating-disc");
    if (disc) {
        disc.style.transform = `rotate(${currentRotation}deg)`;
    }

    const handleToggleClick = () => {
        const element = document.documentElement;
        const disc = document.querySelector(".rotating-disc");

        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");

        // Always rotate clockwise (add 180 degrees)
        currentRotation += 180;
        if (disc) {
            disc.style.transform = `rotate(${currentRotation}deg)`;
        }
    };

    document.getElementById("themeToggle")?.addEventListener("click", handleToggleClick);
</script>
