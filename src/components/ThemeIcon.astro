---
export interface Props {
    class?: string;
}

const { class: className } = Astro.props;
---

<button id="theme-toggle" class:list={["theme-toggle", className]} aria-label="Toggle theme">
    <div class="disc-container">
        <div id="theme-disc" class="rotating-disc" data-theme="light">
            <svg
                class="theme-icon sun-icon"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
            >
                <circle cx="12" cy="12" r="6" stroke="currentColor" stroke-width="2" fill="none"></circle>
                <path d="m12 0.5 0 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m12 22 0 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m3.5 3.5 1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m19 19 1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m0.5 12 1.5 0" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m22 12 1.5 0" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m5 19-1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
                <path d="m20.5 3.5-1.5 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path>
            </svg>

            <svg
                class="theme-icon moon-icon"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
            >
                <path
                    d="M21 12.79A10 10 0 1 1 10.21 3 7 7 0 0 0 21 12.79z"
                    stroke="currentColor"
                    stroke-width="2"
                    fill="none"></path>
            </svg>
        </div>
    </div>
</button>

<style>
    .theme-toggle {
        border: 0;
        background: transparent;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 15px;
        position: relative;
        overflow: hidden;
        transition: transform 0.1s ease;
    }

    .theme-toggle:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
    }

    .theme-toggle::before {
        content: "";
        position: absolute;
        inset: 0;
        background: radial-gradient(ellipse 45% 90% at bottom, rgba(0, 0, 0, 0.3), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
    }

    :global(.dark) .theme-toggle::before {
        background: radial-gradient(ellipse 45% 90% at bottom, rgba(255, 255, 255, 0.3), transparent);
    }

    @media (hover: hover) {
        .theme-toggle:hover::before {
            opacity: 1;
        }
    }

    .disc-container {
        width: 30px;
        height: 30px;
        overflow: hidden;
        border-radius: 15px;
        position: relative;
    }

    .rotating-disc {
        width: 60px;
        height: 60px;
        position: absolute;
        top: 0;
        left: -16px;
        transform-origin: 30px 30px;
        transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .rotating-disc[data-theme="light"] {
        transform: rotate(180deg);
    }

    .rotating-disc[data-theme="dark"] {
        transform: rotate(0deg);
    }

    .theme-icon {
        position: absolute;
        color: currentColor;
    }

    .theme-icon circle,
    .theme-icon path {
        transition: opacity 0.2s ease;
    }

    :global(.dark) .theme-icon {
        color: white;
    }

    @media (hover: hover) {
        .theme-toggle:hover .theme-icon circle,
        .theme-toggle:hover .theme-icon path {
            opacity: 1;
        }
    }

    /* Icon positioning: Sun at top (12 o'clock), Moon at bottom (6 o'clock) */
    .sun-icon {
        left: 20px;
        top: 35px;
    }

    .moon-icon {
        left: 20px;
        top: 4px;
    }

    /* Reduced motion accessibility */
    @media (prefers-reduced-motion: reduce) {
        .rotating-disc {
            transition: none;
        }

        .theme-toggle::before {
            transition: none;
        }

        .theme-icon circle,
        .theme-icon path {
            transition: none;
        }
    }
</style>

<script is:inline>
    const THEMES = {
        DARK: "dark",
        LIGHT: "light",
    };

    const STORAGE_KEY = "theme";
    const ELEMENT_IDS = {
        TOGGLE: "theme-toggle",
        DISC: "theme-disc",
    };

    function getStoredTheme() {
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        const preferred = prefersDark ? THEMES.DARK : THEMES.LIGHT;

        const stored = localStorage?.getItem(STORAGE_KEY);
        if (stored === THEMES.DARK || stored === THEMES.LIGHT) {
            return stored;
        }

        return preferred;
    }

    function applyTheme(theme) {
        const html = document.documentElement;
        const disc = document.getElementById(ELEMENT_IDS.DISC);

        if (theme === THEMES.DARK) {
            html.classList.add(THEMES.DARK);
        } else {
            html.classList.remove(THEMES.DARK);
        }

        if (disc) {
            disc.dataset.theme = theme;
        }

        localStorage.setItem(STORAGE_KEY, theme);
    }

    function toggleTheme() {
        const currentTheme = document.documentElement.classList.contains(THEMES.DARK) ? THEMES.DARK : THEMES.LIGHT;
        const newTheme = currentTheme === THEMES.DARK ? THEMES.LIGHT : THEMES.DARK;
        applyTheme(newTheme);
    }

    function initializeTheme() {
        const theme = getStoredTheme();
        applyTheme(theme);

        // Clean event listeners to prevent duplicates
        const toggleButton = document.getElementById(ELEMENT_IDS.TOGGLE);
        if (toggleButton) {
            // Clone to remove all event listeners
            const newButton = toggleButton.cloneNode(true);
            toggleButton.parentNode?.replaceChild(newButton, toggleButton);
            newButton.addEventListener("click", toggleTheme);
        }
    }

    // Initialize theme immediately
    initializeTheme();

    // Re-initialize after client-side navigation (Astro view transitions)
    document.addEventListener("astro:page-load", initializeTheme);
</script>
